// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vss.proto

/*
Package vss is a generated protocol buffer package.

It is generated from these files:
	vss.proto

It has these top-level messages:
	EncryptedDeal
	Deal
	Response
	Justification
*/
package vss

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import crypto "crypto"
import share "crypto/share"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// EncryptedDeal holds a share encrypted towards the share holder's longterm
// public key..
type EncryptedDeal struct {
	// ephemereal diffie hellman key
	Dhkey *crypto.Point `protobuf:"bytes,1,opt,name=dhkey" json:"dhkey,omitempty"`
	// schnorr signature over the dhkey by the longterm key of the dealer
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// nonce used in the generation of the ephemereal key
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// ciphertext of the deal marshalled by protobuf2. TODO: marshal in a
	// more explicit and easier way.
	Ciphertext []byte `protobuf:"bytes,4,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (m *EncryptedDeal) Reset()                    { *m = EncryptedDeal{} }
func (m *EncryptedDeal) String() string            { return proto.CompactTextString(m) }
func (*EncryptedDeal) ProtoMessage()               {}
func (*EncryptedDeal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EncryptedDeal) GetDhkey() *crypto.Point {
	if m != nil {
		return m.Dhkey
	}
	return nil
}

func (m *EncryptedDeal) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *EncryptedDeal) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EncryptedDeal) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

//
// Deal holds the share created by a dealer for a round of a vss or dkg protocol
// It is always meant to be encrypted when on transit because it contains
// private information (the share).
type Deal struct {
	// session id of the current protocol run
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// private share of the deal
	Share *share.PrivateShare `protobuf:"bytes,2,opt,name=share" json:"share,omitempty"`
	// threshold of the secret sharing protocol run
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
	// commitments of the polynomial used to derive the share
	Commitments []*crypto.Point `protobuf:"bytes,4,rep,name=commitments" json:"commitments,omitempty"`
}

func (m *Deal) Reset()                    { *m = Deal{} }
func (m *Deal) String() string            { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()               {}
func (*Deal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Deal) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *Deal) GetShare() *share.PrivateShare {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *Deal) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Deal) GetCommitments() []*crypto.Point {
	if m != nil {
		return m.Commitments
	}
	return nil
}

//
// Response is the response of a participant after having received an encrypted
// deal. It is meant to be broadcasted to every participants.
type Response struct {
	// session id of the
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// index of the verifier issuing the response
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// status of the response. false = complaint, true = approval
	Status bool `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	// signature over the packet using the longterm's key of the participant at
	// the given index
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *Response) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Response) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Response) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

//
// Justification enables a dealer to justify that it did not cheat in case some
// nodes complain about their received deal. It is NOT YET in production use
// though.
type Justification struct {
	// session id of the current run
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// index of the issuer of this justification
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// plaintext deal that the complaint response points to
	Deal *Deal `protobuf:"bytes,3,opt,name=deal" json:"deal,omitempty"`
	// signature over the whole packet
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Justification) Reset()                    { *m = Justification{} }
func (m *Justification) String() string            { return proto.CompactTextString(m) }
func (*Justification) ProtoMessage()               {}
func (*Justification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Justification) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *Justification) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Justification) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *Justification) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*EncryptedDeal)(nil), "vss.EncryptedDeal")
	proto.RegisterType((*Deal)(nil), "vss.Deal")
	proto.RegisterType((*Response)(nil), "vss.Response")
	proto.RegisterType((*Justification)(nil), "vss.Justification")
}

func init() { proto.RegisterFile("vss.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xc9, 0xd7, 0xa4, 0xb4, 0x93, 0x2f, 0x97, 0x6d, 0xf9, 0x08, 0xe5, 0xab, 0x94, 0x78,
	0xa9, 0x97, 0x14, 0xea, 0x2b, 0xe8, 0x41, 0x4f, 0x65, 0x7d, 0x00, 0x89, 0xc9, 0x68, 0x16, 0xdb,
	0xdd, 0xb0, 0x33, 0x29, 0xed, 0xd1, 0x9b, 0x6f, 0xe1, 0xab, 0x4a, 0x76, 0x0b, 0xad, 0x0a, 0x0a,
	0x5e, 0x12, 0xfe, 0xff, 0xff, 0x32, 0xf3, 0x9b, 0x61, 0x60, 0xb8, 0x25, 0xca, 0x1b, 0x6b, 0xd8,
	0x88, 0xde, 0x96, 0x68, 0x32, 0x2a, 0xed, 0xbe, 0x61, 0xb3, 0xf0, 0x3f, 0x9f, 0x4c, 0xd2, 0x83,
	0x49, 0x75, 0x61, 0xd1, 0x7f, 0x7d, 0x92, 0xbd, 0x06, 0x90, 0x5c, 0x6b, 0x17, 0x63, 0x75, 0x85,
	0xc5, 0x5a, 0x9c, 0x43, 0x54, 0xd5, 0xcf, 0xb8, 0x4f, 0x83, 0x59, 0x30, 0x8f, 0x97, 0x49, 0x7e,
	0xa8, 0xb4, 0x32, 0x4a, 0xb3, 0xf4, 0x99, 0xf8, 0x0f, 0x43, 0x52, 0x4f, 0xba, 0xe0, 0xd6, 0x62,
	0xfa, 0x67, 0x16, 0xcc, 0xff, 0xca, 0xa3, 0x21, 0xc6, 0x10, 0x69, 0xa3, 0x4b, 0x4c, 0x7b, 0x2e,
	0xf1, 0x42, 0x9c, 0x01, 0x94, 0xaa, 0xa9, 0xd1, 0x32, 0xee, 0x38, 0x0d, 0x5d, 0x74, 0xe2, 0x64,
	0x6f, 0x01, 0x84, 0x8e, 0x60, 0x0a, 0x40, 0x48, 0xa4, 0x8c, 0xbe, 0x57, 0x95, 0xc3, 0xe8, 0xaa,
	0x7b, 0xe7, 0xa6, 0x12, 0x17, 0x10, 0xb9, 0x09, 0x5c, 0xdf, 0x78, 0x39, 0xca, 0xfd, 0x3c, 0x2b,
	0xab, 0xb6, 0x05, 0xe3, 0x5d, 0x27, 0xa4, 0x7f, 0xd1, 0x61, 0x72, 0x6d, 0x91, 0x6a, 0xb3, 0xae,
	0x1c, 0x4c, 0x22, 0x8f, 0x86, 0x58, 0x40, 0x5c, 0x9a, 0xcd, 0x46, 0xf1, 0x06, 0x35, 0x53, 0x1a,
	0xce, 0x7a, 0x5f, 0xe7, 0x3d, 0x7d, 0x91, 0xb5, 0x30, 0x90, 0x48, 0x8d, 0xd1, 0x84, 0x3f, 0x41,
	0x8e, 0x21, 0x52, 0xba, 0xc2, 0x9d, 0x83, 0x4c, 0xa4, 0x17, 0xe2, 0x1f, 0xf4, 0x89, 0x0b, 0x6e,
	0xc9, 0xc1, 0x0c, 0xe4, 0x41, 0x7d, 0x5c, 0x67, 0xf8, 0x69, 0x9d, 0xd9, 0x4b, 0x00, 0xc9, 0x6d,
	0x4b, 0xac, 0x1e, 0x55, 0x59, 0xb0, 0x32, 0xfa, 0x77, 0xcd, 0xa7, 0x10, 0x56, 0x58, 0xac, 0x5d,
	0xeb, 0x78, 0x39, 0xcc, 0xbb, 0xc3, 0xe9, 0xf6, 0x2d, 0x9d, 0xfd, 0x3d, 0xc3, 0x43, 0xdf, 0x9d,
	0xcb, 0xe5, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x88, 0x2c, 0x24, 0x6f, 0x02, 0x00, 0x00,
}
