// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypto/share/dkg/dkg.proto

/*
Package dkg is a generated protocol buffer package.

It is generated from these files:
	crypto/share/dkg/dkg.proto

It has these top-level messages:
	Deal
	Response
	Justification
*/
package dkg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import vss "github.com/dedis/drand/protobuf/crypto/share/vss"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Deal contains a share for a participant.
type Deal struct {
	// index of the dealer, the issuer of the share
	Index uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// encrypted version of the deal
	Deal *vss.EncryptedDeal `protobuf:"bytes,2,opt,name=deal" json:"deal,omitempty"`
}

func (m *Deal) Reset()                    { *m = Deal{} }
func (m *Deal) String() string            { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()               {}
func (*Deal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Deal) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Deal) GetDeal() *vss.EncryptedDeal {
	if m != nil {
		return m.Deal
	}
	return nil
}

// Response holds the response that a participant broadcast after having
// received a deal.
type Response struct {
	// index of the dealer for which this response is for
	Index uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// response from the participant which received a deal
	Response *vss.Response `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Response) GetResponse() *vss.Response {
	if m != nil {
		return m.Response
	}
	return nil
}

// Justification holds the justification from a dealer after a participant
// issued a complaint response because of a supposedly invalid deal.
type Justification struct {
	// index of the dealer who is issuing this justification
	Index uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// justification from the dealer
	Justification *vss.Justification `protobuf:"bytes,2,opt,name=justification" json:"justification,omitempty"`
}

func (m *Justification) Reset()                    { *m = Justification{} }
func (m *Justification) String() string            { return proto.CompactTextString(m) }
func (*Justification) ProtoMessage()               {}
func (*Justification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Justification) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Justification) GetJustification() *vss.Justification {
	if m != nil {
		return m.Justification
	}
	return nil
}

func init() {
	proto.RegisterType((*Deal)(nil), "dkg.Deal")
	proto.RegisterType((*Response)(nil), "dkg.Response")
	proto.RegisterType((*Justification)(nil), "dkg.Justification")
}

func init() { proto.RegisterFile("crypto/share/dkg/dkg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x2e, 0xaa, 0x2c,
	0x28, 0xc9, 0xd7, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0xd5, 0x4f, 0xc9, 0x4e, 0x07, 0x61, 0xbd, 0x82,
	0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xe6, 0x94, 0xec, 0x74, 0x29, 0x54, 0x05, 0x65, 0xc5, 0xc5, 0x20,
	0x0c, 0x51, 0xa0, 0xe4, 0xc2, 0xc5, 0xe2, 0x92, 0x9a, 0x98, 0x23, 0x24, 0xc2, 0xc5, 0x9a, 0x99,
	0x97, 0x92, 0x5a, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1b, 0x04, 0xe1, 0x08, 0xa9, 0x71, 0xb1,
	0xa4, 0xa4, 0x26, 0xe6, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0xe9, 0x81, 0xf4, 0xb9,
	0xe6, 0x81, 0x8d, 0x4b, 0x4d, 0x01, 0xe9, 0x0b, 0x02, 0xcb, 0x2b, 0x79, 0x73, 0x71, 0x04, 0xa5,
	0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0xe2, 0x30, 0x49, 0x93, 0x8b, 0xa3, 0x08, 0xaa, 0x02, 0x6a,
	0x1a, 0x2f, 0xd8, 0x34, 0x98, 0xb6, 0x20, 0xb8, 0xb4, 0x52, 0x3c, 0x17, 0xaf, 0x57, 0x69, 0x71,
	0x49, 0x66, 0x5a, 0x66, 0x72, 0x62, 0x49, 0x66, 0x7e, 0x1e, 0x0e, 0x13, 0x2d, 0xb8, 0x78, 0xb3,
	0x90, 0x95, 0xa1, 0x38, 0x12, 0xc5, 0x80, 0x20, 0x54, 0x85, 0x4e, 0x46, 0x51, 0x06, 0xe9, 0x99,
	0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x29, 0xa9, 0x29, 0x99, 0xc5, 0xfa, 0x29,
	0x45, 0x89, 0x79, 0x29, 0xfa, 0xe0, 0x30, 0x49, 0x2a, 0x4d, 0xd3, 0x47, 0x0f, 0xd2, 0x24, 0x36,
	0xb0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x98, 0x2b, 0xd3, 0x6d, 0x01, 0x00, 0x00,
}
