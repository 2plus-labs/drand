// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dkg/dkg.proto

/*
Package dkg is a generated protocol buffer package.

It is generated from these files:
	dkg/dkg.proto

It has these top-level messages:
	DKGPacket
	DKGResponse
*/
package dkg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dkg1 "github.com/dedis/drand/protobuf/crypto/share/dkg"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DKGPacket is used by the nodes to run the dkg protocol before being able to
// generate randomness beacons.
type DKGPacket struct {
	// Types that are valid to be assigned to Packet:
	//	*DKGPacket_Deal
	//	*DKGPacket_Response
	//	*DKGPacket_Justification
	Packet isDKGPacket_Packet `protobuf_oneof:"packet"`
}

func (m *DKGPacket) Reset()                    { *m = DKGPacket{} }
func (m *DKGPacket) String() string            { return proto.CompactTextString(m) }
func (*DKGPacket) ProtoMessage()               {}
func (*DKGPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isDKGPacket_Packet interface {
	isDKGPacket_Packet()
}

type DKGPacket_Deal struct {
	Deal *dkg1.Deal `protobuf:"bytes,1,opt,name=deal,oneof"`
}
type DKGPacket_Response struct {
	Response *dkg1.Response `protobuf:"bytes,2,opt,name=response,oneof"`
}
type DKGPacket_Justification struct {
	Justification *dkg1.Justification `protobuf:"bytes,3,opt,name=justification,oneof"`
}

func (*DKGPacket_Deal) isDKGPacket_Packet()          {}
func (*DKGPacket_Response) isDKGPacket_Packet()      {}
func (*DKGPacket_Justification) isDKGPacket_Packet() {}

func (m *DKGPacket) GetPacket() isDKGPacket_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *DKGPacket) GetDeal() *dkg1.Deal {
	if x, ok := m.GetPacket().(*DKGPacket_Deal); ok {
		return x.Deal
	}
	return nil
}

func (m *DKGPacket) GetResponse() *dkg1.Response {
	if x, ok := m.GetPacket().(*DKGPacket_Response); ok {
		return x.Response
	}
	return nil
}

func (m *DKGPacket) GetJustification() *dkg1.Justification {
	if x, ok := m.GetPacket().(*DKGPacket_Justification); ok {
		return x.Justification
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DKGPacket) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DKGPacket_OneofMarshaler, _DKGPacket_OneofUnmarshaler, _DKGPacket_OneofSizer, []interface{}{
		(*DKGPacket_Deal)(nil),
		(*DKGPacket_Response)(nil),
		(*DKGPacket_Justification)(nil),
	}
}

func _DKGPacket_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DKGPacket)
	// packet
	switch x := m.Packet.(type) {
	case *DKGPacket_Deal:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deal); err != nil {
			return err
		}
	case *DKGPacket_Response:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Response); err != nil {
			return err
		}
	case *DKGPacket_Justification:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Justification); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DKGPacket.Packet has unexpected type %T", x)
	}
	return nil
}

func _DKGPacket_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DKGPacket)
	switch tag {
	case 1: // packet.deal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(dkg1.Deal)
		err := b.DecodeMessage(msg)
		m.Packet = &DKGPacket_Deal{msg}
		return true, err
	case 2: // packet.response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(dkg1.Response)
		err := b.DecodeMessage(msg)
		m.Packet = &DKGPacket_Response{msg}
		return true, err
	case 3: // packet.justification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(dkg1.Justification)
		err := b.DecodeMessage(msg)
		m.Packet = &DKGPacket_Justification{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DKGPacket_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DKGPacket)
	// packet
	switch x := m.Packet.(type) {
	case *DKGPacket_Deal:
		s := proto.Size(x.Deal)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DKGPacket_Response:
		s := proto.Size(x.Response)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DKGPacket_Justification:
		s := proto.Size(x.Justification)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DKGResponse struct {
}

func (m *DKGResponse) Reset()                    { *m = DKGResponse{} }
func (m *DKGResponse) String() string            { return proto.CompactTextString(m) }
func (*DKGResponse) ProtoMessage()               {}
func (*DKGResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*DKGPacket)(nil), "dkg.DKGPacket")
	proto.RegisterType((*DKGResponse)(nil), "dkg.DKGResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dkg service

type DkgClient interface {
	Setup(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*DKGResponse, error)
}

type dkgClient struct {
	cc *grpc.ClientConn
}

func NewDkgClient(cc *grpc.ClientConn) DkgClient {
	return &dkgClient{cc}
}

func (c *dkgClient) Setup(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*DKGResponse, error) {
	out := new(DKGResponse)
	err := grpc.Invoke(ctx, "/dkg.Dkg/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dkg service

type DkgServer interface {
	Setup(context.Context, *DKGPacket) (*DKGResponse, error)
}

func RegisterDkgServer(s *grpc.Server, srv DkgServer) {
	s.RegisterService(&_Dkg_serviceDesc, srv)
}

func _Dkg_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DkgServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.Dkg/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DkgServer).Setup(ctx, req.(*DKGPacket))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dkg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkg.Dkg",
	HandlerType: (*DkgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Dkg_Setup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkg/dkg.proto",
}

func init() { proto.RegisterFile("dkg/dkg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x18, 0xc5, 0x5b, 0xab, 0x63, 0xfb, 0x46, 0x45, 0x72, 0x2a, 0xbd, 0x28, 0x13, 0x41, 0x11, 0x1a,
	0x99, 0x37, 0x8f, 0xa3, 0xb0, 0xe2, 0x2e, 0x52, 0x6f, 0xde, 0xd2, 0x26, 0xcb, 0x62, 0x66, 0x13,
	0x92, 0xf4, 0xe0, 0x5f, 0xe3, 0xbf, 0x2a, 0xfb, 0x34, 0xe2, 0x8e, 0x2f, 0xef, 0xf7, 0xc8, 0xfb,
	0x1e, 0xe4, 0x5c, 0x4b, 0xca, 0xb5, 0xac, 0xac, 0x33, 0xc1, 0x90, 0x8c, 0x6b, 0x59, 0x96, 0xbd,
	0xfb, 0xb4, 0xc1, 0x50, 0xbf, 0x63, 0x4e, 0xd0, 0x23, 0x60, 0xf1, 0x95, 0xc2, 0xac, 0xde, 0xac,
	0x5f, 0x58, 0xaf, 0x45, 0x20, 0x97, 0x70, 0xca, 0x05, 0xdb, 0x17, 0xe9, 0x55, 0x7a, 0x3b, 0x5f,
	0xce, 0xaa, 0x03, 0x57, 0x0b, 0xb6, 0x6f, 0x92, 0x16, 0x0d, 0x72, 0x0f, 0x53, 0x27, 0xbc, 0x35,
	0x83, 0x17, 0xc5, 0x09, 0x42, 0x39, 0x42, 0xed, 0xef, 0x63, 0x93, 0xb4, 0x7f, 0x00, 0x79, 0x82,
	0xfc, 0x7d, 0xf4, 0x41, 0x6d, 0x55, 0xcf, 0x82, 0x32, 0x43, 0x91, 0x61, 0x82, 0x60, 0xe2, 0xf9,
	0xbf, 0xd3, 0x24, 0xed, 0x31, 0xba, 0x9a, 0xc2, 0xc4, 0x62, 0xa7, 0x45, 0x0e, 0xf3, 0x7a, 0xb3,
	0x8e, 0x1f, 0x2c, 0x1f, 0x20, 0xab, 0xb5, 0x24, 0x77, 0x70, 0xf6, 0x2a, 0xc2, 0x68, 0xc9, 0xf9,
	0x4f, 0xc9, 0x78, 0x42, 0x79, 0x11, 0x75, 0x4c, 0xac, 0x6e, 0xde, 0xae, 0xa5, 0x0a, 0xbb, 0xb1,
	0xab, 0x7a, 0xf3, 0x41, 0xb9, 0xe0, 0xca, 0x53, 0xee, 0xd8, 0xc0, 0x29, 0x4e, 0xd0, 0x8d, 0xdb,
	0xc3, 0x1e, 0xdd, 0x04, 0xd5, 0xe3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x37, 0x82, 0x2e,
	0x42, 0x01, 0x00, 0x00,
}
