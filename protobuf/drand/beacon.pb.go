// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drand/beacon.proto

/*
Package drand is a generated protocol buffer package.

It is generated from these files:
	drand/beacon.proto
	drand/client.proto

It has these top-level messages:
	BeaconRequest
	BeaconResponse
	PublicRandRequest
	PublicRandResponse
	PrivateRandRequest
	PrivateRandResponse
	ECIESObject
*/
package drand

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BeaconRequest  holds a link to a previous signature, a timestamp and the
// partial signature for this beacon. All participants send and collects many of
// theses partial beacon packets to recreate locally one beacon
type BeaconRequest struct {
	PreviousSig []byte `protobuf:"bytes,1,opt,name=previous_sig,json=previousSig,proto3" json:"previous_sig,omitempty"`
	Timestamp   uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	PartialSig  []byte `protobuf:"bytes,3,opt,name=partial_sig,json=partialSig,proto3" json:"partial_sig,omitempty"`
}

func (m *BeaconRequest) Reset()                    { *m = BeaconRequest{} }
func (m *BeaconRequest) String() string            { return proto.CompactTextString(m) }
func (*BeaconRequest) ProtoMessage()               {}
func (*BeaconRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BeaconRequest) GetPreviousSig() []byte {
	if m != nil {
		return m.PreviousSig
	}
	return nil
}

func (m *BeaconRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BeaconRequest) GetPartialSig() []byte {
	if m != nil {
		return m.PartialSig
	}
	return nil
}

type BeaconResponse struct {
	PartialSig []byte `protobuf:"bytes,2,opt,name=partial_sig,json=partialSig,proto3" json:"partial_sig,omitempty"`
}

func (m *BeaconResponse) Reset()                    { *m = BeaconResponse{} }
func (m *BeaconResponse) String() string            { return proto.CompactTextString(m) }
func (*BeaconResponse) ProtoMessage()               {}
func (*BeaconResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BeaconResponse) GetPartialSig() []byte {
	if m != nil {
		return m.PartialSig
	}
	return nil
}

func init() {
	proto.RegisterType((*BeaconRequest)(nil), "drand.BeaconRequest")
	proto.RegisterType((*BeaconResponse)(nil), "drand.BeaconResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Beacon service

type BeaconClient interface {
	NewBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error)
}

type beaconClient struct {
	cc *grpc.ClientConn
}

func NewBeaconClient(cc *grpc.ClientConn) BeaconClient {
	return &beaconClient{cc}
}

func (c *beaconClient) NewBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error) {
	out := new(BeaconResponse)
	err := grpc.Invoke(ctx, "/drand.Beacon/NewBeacon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Beacon service

type BeaconServer interface {
	NewBeacon(context.Context, *BeaconRequest) (*BeaconResponse, error)
}

func RegisterBeaconServer(s *grpc.Server, srv BeaconServer) {
	s.RegisterService(&_Beacon_serviceDesc, srv)
}

func _Beacon_NewBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconServer).NewBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Beacon/NewBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconServer).NewBeacon(ctx, req.(*BeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Beacon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drand.Beacon",
	HandlerType: (*BeaconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBeacon",
			Handler:    _Beacon_NewBeacon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drand/beacon.proto",
}

func init() { proto.RegisterFile("drand/beacon.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0xe9, 0xa8, 0x03, 0x73, 0x67, 0x74, 0x11, 0x14, 0x06, 0x11, 0x1c, 0x07, 0xc4, 0xae,
	0x52, 0xd4, 0x8d, 0xeb, 0x3e, 0x80, 0x8b, 0x76, 0xe7, 0x46, 0x92, 0xe6, 0x1a, 0x2f, 0xd8, 0x26,
	0xcd, 0x8f, 0xbe, 0xbe, 0x90, 0xb4, 0x88, 0x5d, 0x9e, 0x0f, 0x3e, 0x0e, 0xe7, 0x00, 0x53, 0x4e,
	0x0c, 0xaa, 0x92, 0x28, 0x3a, 0x33, 0x70, 0xeb, 0x4c, 0x30, 0xec, 0x2c, 0xb1, 0xe3, 0x08, 0xe7,
	0x75, 0xc2, 0x0d, 0x8e, 0x11, 0x7d, 0x60, 0x77, 0xb0, 0xb3, 0x0e, 0xbf, 0xc9, 0x44, 0xff, 0xee,
	0x49, 0xef, 0x8b, 0x43, 0x51, 0xee, 0x9a, 0xed, 0xcc, 0x5a, 0xd2, 0xec, 0x06, 0x36, 0x81, 0x7a,
	0xf4, 0x41, 0xf4, 0x76, 0xbf, 0x3a, 0x14, 0xe5, 0x69, 0xf3, 0x07, 0xd8, 0x2d, 0x6c, 0xad, 0x70,
	0x81, 0xc4, 0x57, 0xf2, 0x4f, 0x92, 0x0f, 0x13, 0x6a, 0x49, 0x1f, 0x1f, 0xe1, 0x62, 0xae, 0xf4,
	0xd6, 0x0c, 0x1e, 0x97, 0xca, 0x6a, 0xa9, 0x3c, 0xd5, 0xb0, 0xce, 0x0a, 0x7b, 0x81, 0xcd, 0x2b,
	0xfe, 0x4c, 0xe1, 0x92, 0xa7, 0x11, 0xfc, 0xdf, 0x82, 0xeb, 0xab, 0x05, 0xcd, 0x25, 0xf5, 0xc3,
	0xdb, 0xbd, 0xa6, 0xf0, 0x19, 0x25, 0xef, 0x4c, 0x5f, 0x29, 0x54, 0xe4, 0xab, 0xfc, 0x4b, 0x3a,
	0x44, 0xc6, 0x8f, 0x1c, 0xe5, 0x3a, 0xe5, 0xe7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x31,
	0x96, 0x04, 0x36, 0x01, 0x00, 0x00,
}
