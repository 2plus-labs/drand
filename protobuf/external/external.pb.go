// Code generated by protoc-gen-go. DO NOT EDIT.
// source: external/external.proto

/*
Package external is a generated protocol buffer package.

It is generated from these files:
	external/external.proto

It has these top-level messages:
	PublicRandRequest
	PublicRandResponse
*/
package external

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PublicRandRequest requests a public random value that has been generated in a
// unbiasable way and verifiable.
type PublicRandRequest struct {
	// timestamp identifies the requested randomness. If it is equals to 0, the
	// response should return the latest public randomness avaiable.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *PublicRandRequest) Reset()                    { *m = PublicRandRequest{} }
func (m *PublicRandRequest) String() string            { return proto.CompactTextString(m) }
func (*PublicRandRequest) ProtoMessage()               {}
func (*PublicRandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublicRandRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// PublicRandResponse holds a signature which is the random value. It can be
// verified thanks to the distributed public key of the nodes that have ran the
// DKG protocol and is unbiasable. The message to the signature verification
// routine is "previous_sig  || timestamp".
type PublicRandResponse struct {
	PreviousSig []byte `protobuf:"bytes,1,opt,name=previous_sig,json=previousSig,proto3" json:"previous_sig,omitempty"`
	Timestamp   uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Signature   []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PublicRandResponse) Reset()                    { *m = PublicRandResponse{} }
func (m *PublicRandResponse) String() string            { return proto.CompactTextString(m) }
func (*PublicRandResponse) ProtoMessage()               {}
func (*PublicRandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublicRandResponse) GetPreviousSig() []byte {
	if m != nil {
		return m.PreviousSig
	}
	return nil
}

func (m *PublicRandResponse) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PublicRandResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicRandRequest)(nil), "external.PublicRandRequest")
	proto.RegisterType((*PublicRandResponse)(nil), "external.PublicRandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Randomness service

type RandomnessClient interface {
	Public(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error)
}

type randomnessClient struct {
	cc *grpc.ClientConn
}

func NewRandomnessClient(cc *grpc.ClientConn) RandomnessClient {
	return &randomnessClient{cc}
}

func (c *randomnessClient) Public(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error) {
	out := new(PublicRandResponse)
	err := grpc.Invoke(ctx, "/external.Randomness/Public", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Randomness service

type RandomnessServer interface {
	Public(context.Context, *PublicRandRequest) (*PublicRandResponse, error)
}

func RegisterRandomnessServer(s *grpc.Server, srv RandomnessServer) {
	s.RegisterService(&_Randomness_serviceDesc, srv)
}

func _Randomness_Public_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicRandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomnessServer).Public(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.Randomness/Public",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomnessServer).Public(ctx, req.(*PublicRandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Randomness_serviceDesc = grpc.ServiceDesc{
	ServiceName: "external.Randomness",
	HandlerType: (*RandomnessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Public",
			Handler:    _Randomness_Public_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/external.proto",
}

func init() { proto.RegisterFile("external/external.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0x43, 0x31,
	0x0c, 0x85, 0x29, 0xa0, 0x0a, 0x4c, 0x17, 0xb2, 0x50, 0x41, 0x07, 0xb8, 0x53, 0xc5, 0x70, 0x23,
	0xe0, 0x0d, 0x90, 0xd8, 0x51, 0xba, 0xb1, 0xa0, 0xa4, 0x31, 0xc1, 0x52, 0xf3, 0x43, 0x9c, 0x20,
	0x1e, 0x1f, 0x35, 0xd5, 0x6d, 0xf9, 0xe9, 0x96, 0x7c, 0xd6, 0xb1, 0xcf, 0x39, 0x70, 0x81, 0x5f,
	0x05, 0x73, 0xd0, 0x2b, 0x39, 0x3c, 0xfa, 0x94, 0x63, 0x89, 0xe2, 0x64, 0xf8, 0x77, 0x77, 0x70,
	0xfe, 0x5c, 0xcd, 0x8a, 0x96, 0x4a, 0x07, 0xab, 0xf0, 0xa3, 0x22, 0x17, 0x31, 0x83, 0xd3, 0x42,
	0x1e, 0xb9, 0x68, 0x9f, 0xa6, 0xa3, 0xeb, 0xd1, 0xfc, 0x58, 0xed, 0x40, 0xc7, 0x20, 0x7e, 0x4a,
	0x38, 0xc5, 0xc0, 0x28, 0x6e, 0x60, 0x92, 0x32, 0x7e, 0x52, 0xac, 0xfc, 0xca, 0xe4, 0x9a, 0x6c,
	0xa2, 0xce, 0x06, 0xb6, 0x20, 0xf7, 0x7b, 0xed, 0xe1, 0x9f, 0xb5, 0xeb, 0x29, 0x93, 0x0b, 0xba,
	0xd4, 0x8c, 0xd3, 0xa3, 0xa6, 0xde, 0x81, 0xfb, 0x05, 0xc0, 0xfa, 0x5c, 0xf4, 0x01, 0x99, 0xc5,
	0x13, 0x8c, 0x37, 0x16, 0xc4, 0x55, 0xbf, 0x8d, 0xf6, 0x2f, 0xc7, 0xe5, 0x6c, 0xff, 0x70, 0xe3,
	0xb8, 0x3b, 0x78, 0xbc, 0x7d, 0x99, 0x3b, 0x2a, 0xef, 0xd5, 0xf4, 0xcb, 0xe8, 0xa5, 0x45, 0x4b,
	0x2c, 0x6d, 0xd6, 0xc1, 0xca, 0x56, 0x93, 0xa9, 0x6f, 0xdb, 0xe2, 0xcc, 0xb8, 0xa1, 0x87, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x91, 0x3d, 0xf1, 0x54, 0x01, 0x00, 0x00,
}
